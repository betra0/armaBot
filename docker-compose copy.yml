services:
 

  db:
    image: mysql:8.0.39
    restart: always
    networks:
      - back-network
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - TZ=America/Santiago
      - MYSQL_DATABASE=${DB}
    ports:
      - "5001:3306"
      
    volumes:
      - ./backend/datasql:/var/lib/mysql
      - ./backend/sql/tablas.sql:/docker-entrypoint-initdb.d/01_tablas.sql

  discord-bot:
    build:
      context: ./backend/discordBot
      dockerfile: Dockerfile        # Asegúrate de tener un Dockerfile configurado en esa carpeta
    container_name: discord-bot
    restart: always               # El contenedor se reinicia siempre que se detenga
    environment:
      - BOTDSTOKEN=${BOTDSTOKEN}   # Token del bot
      - APIHOST=backweb            # Nombre del servicio backend para la API
      - APIPORT=80                 # Puerto del servicio API
      - INTENTSDS=${INTENTSDS}     # Intenciones necesarias para el bot
    depends_on:
      - backweb                    # El bot depende de que el servicio 'backweb' esté disponible
    volumes:
      - bot-ds:/app                # Monta el código en el contenedor para persistencia
    networks:
      - back-network

  redis:
     image: redis:latest
     container_name: redis
     restart: always
     command: ["redis-server", "--appendonly", "yes"]
     volumes:
       - redis_data:/data
     networks:
       - back-network
  
  api1:
    build:
      context: ./backend/api
      dockerfile: dockerfile
    restart: always
    networks:
      - back-network
    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=${DB_PASSWORD}
      - DB=${DB}
      - DB_PORT=3306
      - DOKER=True
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_LOG=${EMAIL_LOG}
      - EMAIL_MAIL=${EMAIL_MAIL}
      - EMAIL_TOKEN=${EMAIL_TOKEN}
      - TOKEN_COC=${TOKEN_COC}
      - CLAN_ID=${CLAN_ID}
      - URL_COC=${URL_COC}
      - RUTA_LOG=/app/log
      - RUTA_TESIS_FILE=/var/tesis
    depends_on:
      - db
    volumes:
      - logs-api:/app/log
    

  cron_jobs:
    build:
      context: ./backend/api  
      dockerfile: dockerfile.cronjobs
    restart: always

    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=${DB_PASSWORD}
      - DB=${DB}
      - DB_PORT=3306
      - DOKER=True
      - SECRET_KEY=${SECRET_KEY}
      - EMAIL_LOG=${EMAIL_LOG}
      - EMAIL_MAIL=${EMAIL_MAIL}
      - EMAIL_TOKEN=${EMAIL_TOKEN}
      - TOKEN_COC=${TOKEN_COC}
      - CLAN_ID=${CLAN_ID}
      - URL_COC=${URL_COC}
      - RUTA_LOG=/app/log
      - RUTA_TESIS_FILE=/var/tesis
    depends_on:
      - db
    networks:
      - back-network
 
networks:
  back-network:
    driver: bridge

volumes:
  logs-api:
  bot-ds:
  redis_data: